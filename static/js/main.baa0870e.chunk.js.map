{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableurl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.baa0870e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react'\nimport {Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport styles from './Cards.module.css';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate }}) =>{\n    if(! confirmed){\n        return 'loading..';\n    }\n    return (\n        <div className = {styles.container}>\n         <Grid container spacing = {3} justify = \"center\">\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\n                    <Typography variant = \"h5\">\n                    <CountUp\n                        start = {0}\n                        end = {confirmed.value}\n                        duration = {2.5}\n                        separator = ','\n                    />\n                    </Typography>\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                    <Typography variant = \"body2\">No of active cases of COVID-19</Typography>\n                </CardContent>\n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\n                    <Typography variant = \"h5\">\n                    <CountUp\n                        start = {0}\n                        end = {recovered.value}\n                        duration = {2.5}\n                        separator = ','\n                    />\n                    </Typography>\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                    <Typography variant = \"body2\">No of recoveries from COVID-19</Typography>\n                </CardContent>\n            </Grid>\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\n                <CardContent>\n                    <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\n                    <Typography variant = \"h5\">\n                    <CountUp\n                        start = {0}\n                        end = {deaths.value}\n                        duration = {2.5}\n                        separator = ','\n                    />\n                    </Typography>\n                    <Typography color=\"textSecondary\" >{new Date(lastUpdate).toDateString()}</Typography>\n                    <Typography variant = \"body2\">No of deaths of COVID-19</Typography>\n                </CardContent>\n            </Grid>\n         </Grid>\n            \n        </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n    let changeableurl = url;\n\n    if(country){\n        changeableurl = `${url}/countries/${country}`;\n    }\n    try {\n        const {data: {confirmed, recovered, deaths, lastUpdate }} = await axios.get(changeableurl);\n        return {confirmed, recovered, deaths, lastUpdate };\n    } catch (error) {\n        \n    }\n};\n\nexport const fetchDailyData = async () => {\n    try {\n        const {data} = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate\n\n        }));\n\n        return modifiedData;\n    } catch (error) {\n        \n    }\n\n}\n\nexport const fetchCountries = async () => {\n    try {\n        const {data:{countries}} = await axios.get(`${url}/countries`);\n        \n        return countries.map((country)=> country.name);\n\n    } catch (error) {\n        \n    }\n}","import React, {useState, useEffect} from 'react'\nimport {fetchDailyData} from '../../api';\nimport {Line, Bar } from 'react-chartjs-2';\nimport styles from './Charts.module.css';\n\nconst Charts = ({data:{confirmed,recovered,deaths}, country}) =>{\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(()=>{\n        const fetchAPI = async () =>{\n            setDailyData(await fetchDailyData());\n        }\n        \n        fetchAPI();\n    },[]);\n\n    const lineChart = (\n        dailyData.length ? \n        (<Line\n        data = {{\n            labels: dailyData.map(({date})=> date ),\n            datasets:[{\n                data:dailyData.map(({confirmed}) => confirmed),\n                label: 'Infected',\n                borderColor: '#3333ff',\n                fill: true\n            },{\n                data:dailyData.map(({deaths}) => deaths),\n                label: 'Deaths',\n                borderColor: 'red',\n                backgroundColor:\"rgba(255,0,0,0.5)\",\n                fill: true\n            }],\n        }\n        }\n        />) : null\n    );\n\n    const barChart = (\n        confirmed\n        ? <Bar\n            data={{\n                labels:['Infected', 'Recovered', \"Deaths\"],\n                datasets:[{\n                    label: 'People',\n                    backgroundColor:[\n                        'rgba(0,0,255,0.5)',\n                        'rgba(0,255,0,0.5)',\n                        'rgba(255,0,0,0.5)'\n                    ],\n                    data:[confirmed.value, recovered.value, deaths.value]\n                }],\n                \n\n            }}\n            options={{\n                legend:{display:false},\n                title: {display: true, text:`Current state in ${country}`}\n            }}\n\n        />\n        : null\n    );\n    return (\n        <div className={styles.container}>\n            { country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Charts;","import React, {useState, useEffect }from 'react'\nimport {NativeSelect, FormControl } from '@material-ui/core';\nimport styles from './CountryPicker.module.css';\nimport {fetchCountries } from '../../api';\nconst CountryPicker = ({handleCountryChange}) =>{\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n    useEffect(() => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries());\n        }\n        fetchAPI();\n     },[setFetchedCountries]);\n    \n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect onChange={(e)=>handleCountryChange(e.target.value)}>\n                <option value=\"global\">Global</option>\n                { fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","import React, { Component } from 'react';\nimport { Charts, Cards, CountryPicker } from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api';\nimport coronaImage from './images/image.png';\n\nclass App extends Component {\n    state = {\n        data: {},\n        country: \"\"\n    }\n    async componentDidMount(){\n        const fetchedData = await fetchData();\n        this.setState({data: fetchedData});\n    }\n    handleCountryChange = async (country) =>{\n        const fetchedData = await fetchData(country);\n        this.setState({data: fetchedData, country: country});\n    }\n    render() {\n        const {data,country} = this.state;\n        return (\n            <div className={styles.container}>\n                <img  className={styles.image} src={coronaImage}/>\n                <Cards data={data}/>\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                <Charts data= {data} country={country}/>\n             \n            </div>\n        )\n    }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}